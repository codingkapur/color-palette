{"version":3,"sources":["components/LightColors.js","components/DarkColors.js","components/Colors.js","App.js","index.js"],"names":["LightColors","color","rgbToHex","index","clickToCopy","backgroundColor","hexColor","className","style","onClick","DarkColors","Colors","lightList","darkList","originalColor","boxShadow","map","x","toUpperCase","App","useState","currentColor","setCurrentColor","input","setInput","inputError","setInputError","setLightList","setDarkList","regex","RegExp","validateInput","trim","test","borderColor","borderBottom","hexToRgb","hex","noHashHex","slice","hexArray","rgb","i","push","parseInt","hexArr","toString","padStart","join","lighterColorsArray","RGB","lightArray","colorValues","Math","round","reverse","darkerColorsArray","console","log","darkArray","onSubmit","e","preventDefault","alert","type","value","placeholder","onChange","target","ceil","random","colorHex","navigator","clipboard","writeText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11dde148.chunk.js","sourcesContent":["const LightColors = ({ color, index , rgbToHex , clickToCopy}) => {\n\n   const backgroundColor = {\n       backgroundColor: `rgb(${color[0]}, ${color[1]}, ${color[2]})`\n   }\n   const hexColor = rgbToHex(color);\n   \n  return (\n    <div className=\"color__container\" style={backgroundColor} onClick={()=> clickToCopy(hexColor)}>\n      <p className=\"color__intensity\">{color[3]}% Lighter</p>\n      <p className=\"color__title\">#{hexColor}</p>\n    </div>\n  );\n};\n\nexport default LightColors;\n","const DarkColors = ({ color, index, rgbToHex, clickToCopy }) => {\n  const backgroundColor = {\n    backgroundColor: `rgb(${color[0]}, ${color[1]}, ${color[2]})`,\n  };\n\n  const hexColor = rgbToHex(color);\n  return (\n    <div className=\"color__container\" style={backgroundColor} onClick={()=> clickToCopy(hexColor)}>\n      <p className=\"color__intensity\">{color[3]}% Darker</p>\n      <p className=\"color__title\">#{hexColor}</p>\n    </div>\n  );\n};\n\nexport default DarkColors;\n","import React from \"react\";\nimport LightColors from \"./LightColors\";\nimport DarkColors from \"./DarkColors\";\n\nconst Colors = ({ lightList, darkList, originalColor, rgbToHex, clickToCopy }) => {\n    const backgroundColor = {\n        backgroundColor: originalColor,\n        boxShadow: \"0px 10px 5px rgba(0,0,0,0.5)\"\n      };\n  return (\n    <div className=\"colors__container\">\n      {lightList.map((x, index) => {\n        return <LightColors color={x} key={index} rgbToHex={rgbToHex} clickToCopy={clickToCopy}/>;\n      })}\n      <div className=\"color__container\" style={backgroundColor}>\n        <p className=\"color__intensity\">Original Color</p>\n        <p className=\"color__title\">{originalColor.toUpperCase()}</p>\n      </div>\n      {darkList.map((x, index) => {\n        return <DarkColors color={x} key={index} rgbToHex={rgbToHex} clickToCopy={clickToCopy}/>;\n      })}\n    </div>\n  );\n};\n\nexport default Colors;\n","import { useEffect, useState } from \"react\";\nimport Colors from \"./components/Colors\";\n\nfunction App() {\n  //State Values\n  const [currentColor, setCurrentColor] = useState(\"#1266CF\");\n  const [input, setInput] = useState(\"\");\n  const [inputError, setInputError] = useState(true);\n  const [lightList, setLightList] = useState([]);\n  const [darkList, setDarkList] = useState([]);\n\n  //Create a regex express to test for valid Hex Color.\n  const regex = new RegExp(\"^#([A-Fa-f0-9]{6})$\");\n\n  //Functions\n  const validateInput = (input) => {\n    setInput(input.toUpperCase().trim());\n    //Should start with a # symbol, should only contain digits between 0-9 and alphabets between a-f, should be 7 chars in total.\n    if (regex.test(input)) {\n      setInputError(false);\n    } else {\n      setInputError(true);\n    }\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (!inputError) {\n      setCurrentColor(input);\n      setLightList(lighterColorsArray());\n      setDarkList(darkerColorsArray());\n    } else {\n      alert(\"Check the input, fool!\");\n      setInput(\"#\");\n      setCurrentColor(\"#\");\n    }\n  };\n\n  //Inline styling variables\n  const borderColor = {\n    borderBottom: `3px solid #${inputError ? \"ff0000\" : \"00ff00\"}`,\n  };\n  const backgroundColor = {\n    backgroundColor: `${currentColor}`,\n  };\n\n  //HEX TO RGB FUNCTION\n  const hexToRgb = (hex) => {\n    //Remove the # sign\n    const noHashHex = hex.slice(1);\n    //Create an array of length 3 for r, g and b in hex\n    let hexArray = [];\n    let rgb = [];\n    for (let i = 0; i <= 4; ) {\n      hexArray.push(noHashHex.slice(i, i + 2));\n      i = i + 2;\n    }\n    for (let i = 0; i < 3; i++) {\n      rgb.push(parseInt(hexArray[i], 16));\n    }\n    return rgb;\n  };\n\n  const rgbToHex = (rgb) => {\n    const hexArr = [];\n    for (let i = 0; i < 3; i++) {\n      hexArr.push(parseInt(rgb[i]).toString(16).padStart(2, \"0\"));\n    }\n    return hexArr.join(\"\").toUpperCase();\n  };\n\n  const randomizeColor = () => {\n    const rgb = [];\n    for (let i = 0; i < 3; i++) {\n      rgb.push(Math.ceil(Math.random() * 255));\n    }\n    const hex = rgbToHex(rgb);\n    validateInput(hex.padStart(7, \"#\"));\n    // setInputError(false);\n    setCurrentColor(()=>input);\n    setLightList(lighterColorsArray());\n    setDarkList(darkerColorsArray());\n  };\n  const clickToCopy = (colorHex) => {\n    navigator.clipboard.writeText(`#${colorHex}`);\n  };\n\n  //Create Arrays of tints\n  const lighterColorsArray = () => {\n    const RGB = hexToRgb(input);\n    // console.log(RGB);\n    const lightArray = [];\n\n    let i = 10;\n    while (\n      RGB[0] + (RGB[0] * i) / 100 <= 255 &&\n      RGB[1] + (RGB[1] * i) / 100 <= 255 &&\n      RGB[2] + (RGB[2] * i) / 100 <= 255\n    ) {\n      let colorValues = [];\n\n      colorValues.push(Math.round(RGB[0] + (RGB[0] * i) / 100));\n      colorValues.push(Math.round(RGB[1] + (RGB[1] * i) / 100));\n      colorValues.push(Math.round(RGB[2] + (RGB[2] * i) / 100));\n      colorValues.push(i);\n\n      lightArray.push(colorValues);\n      i = i + 10;\n\n      colorValues = [];\n\n      if (i >= 110) {\n        break;\n      }\n    }\n    return lightArray.reverse();\n  };\n\n  //Create Arrays of shades\n  const darkerColorsArray = () => {\n    const RGB = hexToRgb(input);\n    console.log(RGB);\n    const darkArray = [];\n\n    let i = 10;\n    while (\n      RGB[0] - (RGB[0] * i) / 100 >= 0 &&\n      RGB[1] - (RGB[1] * i) / 100 >= 0 &&\n      RGB[2] - (RGB[2] * i) / 100 >= 0\n    ) {\n      let colorValues = [];\n\n      colorValues.push(Math.round(RGB[0] - (RGB[0] * i) / 100));\n      colorValues.push(Math.round(RGB[1] - (RGB[1] * i) / 100));\n      colorValues.push(Math.round(RGB[2] - (RGB[2] * i) / 100));\n      colorValues.push(i);\n\n      darkArray.push(colorValues);\n      i = i + 10;\n\n      colorValues = [];\n\n      if (i >= 110) {\n        break;\n      }\n    }\n    return darkArray;\n  };\n\n  return (\n    <div className=\"app__container\" style={backgroundColor}>\n      <h1 className=\"app__title\">Color Palette</h1>\n      <div className=\"color__selector--container\">\n        <form className=\"color__input--form \" onSubmit={(e) => onSubmit(e)}>\n          <input\n            type=\"text\"\n            value={input}\n            placeholder=\"Enter Hex Value\"\n            className=\"color__input\"\n            onChange={(e) => validateInput(e.target.value)}\n            style={borderColor}\n          />\n          <button className=\"btn submit-btn\">Submit</button>\n        </form>\n        <button className=\"btn randomize-btn\" onClick={randomizeColor}>\n          Random Color\n        </button>\n      </div>\n      <Colors\n        lightList={lightList}\n        darkList={darkList}\n        originalColor={currentColor}\n        rgbToHex={rgbToHex}\n        clickToCopy={clickToCopy}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}